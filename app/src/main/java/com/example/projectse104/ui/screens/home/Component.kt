package com.example.projectse104.ui.screens.home

import android.app.TimePickerDialog
import android.content.Context
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.projectse104.R
import com.example.projectse104.ui.navigation.Screen
import androidx.compose.material3.Card
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.input.TextFieldValue
import com.example.projectse104.*
import com.valentinilk.shimmer.shimmer
import java.util.Calendar

@Composable
fun TopNavBar(navController: NavController,userId:String,index:Int){
    Row(
        horizontalArrangement = Arrangement.Center,
    ) {
        Button(
            onClick = {if (index==1) {} else {navController.navigate("home/$userId")}},
            modifier = Modifier,
            shape = RoundedCornerShape(16.dp),
            colors = ButtonDefaults.buttonColors(containerColor = if(index==1) Color(0xFFF3F8FE) else Color.White)
        ) {
            Text(text = "Rides", color = Color(if(index==1) 0xFF186FF0 else 0xFFBFBFBF))
        }
        Button(
            onClick = {if (index==2) {} else{navController.navigate("find_a_ride/$userId")} },
            modifier = Modifier,
            shape = RoundedCornerShape(16.dp),
            colors = ButtonDefaults.buttonColors(containerColor = if(index==2) Color(0xFFF3F8FE) else Color.White)
        ) {
            Text(text = "Find a Ride", color = Color(if(index==2) 0xFF186FF0 else 0xFFBFBFBF))
        }
        Button(
            onClick = { if (index==3) {} else {navController.navigate("offer_a_ride/$userId")} },
            modifier = Modifier,
            shape = RoundedCornerShape(16.dp),
            colors = ButtonDefaults.buttonColors(containerColor = if(index==3) Color(0xFFF3F8FE) else Color.White)
        ) {
            Text(text = "Offer a Ride", color = Color(if(index==3) 0xFF186FF0 else 0xFFBFBFBF))
        }
    }
}
@Composable
fun SearchBar() {
    var searchText by remember { mutableStateOf(TextFieldValue("")) } // Qu·∫£n l√Ω tr·∫°ng th√°i nh·∫≠p vƒÉn b·∫£n

    TextField(
        value = searchText,
        onValueChange = { searchText = it },
        placeholder = {
            Text(
                "Where do you want to go today?",
                fontSize = 16.sp,
                color = Color.Gray,
                lineHeight = 20.sp // Gi√∫p vƒÉn b·∫£n kh√¥ng b·ªã c·∫Øt
            )
        },
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp)
            .height(50.dp) // TƒÉng nh·∫π chi·ªÅu cao ƒë·ªÉ c√≥ th√™m kh√¥ng gian hi·ªÉn th·ªã
            .clip(RoundedCornerShape(25.dp))
            .background(Color(0xFFEFF8F2)),
        leadingIcon = {
            Icon(
                painter = painterResource(id = R.drawable.ic_search),
                contentDescription = "Search Icon",
                tint = Color.Gray,
                modifier = Modifier.size(24.dp)
            )
        },
        textStyle = TextStyle(
            fontSize = 16.sp,
            lineHeight = 20.sp // ƒê·∫£m b·∫£o d√≤ng ch·ªØ kh√¥ng b·ªã c·∫Øt
        ),
        colors = TextFieldDefaults.colors(
            focusedContainerColor = Color(0xFFEFF8F2),
            unfocusedContainerColor = Color(0xFFEFF8F2),
            disabledContainerColor = Color(0xFFEFF8F2),
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent
        ),
        singleLine = true // Gi·ªØ vƒÉn b·∫£n tr√™n m·ªôt d√≤ng duy nh·∫•t
    )
}
@Composable
fun HomeHeader(userName:String){
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp)
            .clip(RoundedCornerShape(8.dp)) // Bo tr√≤n 4 g√≥c c·ªßa header
            .background(Color(0xFF8FC79A)), // Th√™m background sau khi clip
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Spacer(modifier = Modifier.height(60.dp))

        // Row cho Home v√† Hi, {userId}
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween, // T·∫°o kho·∫£ng c√°ch gi·ªØa "Home" v√† "Hi, {userId}"
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Th√™m icon ng√¥i nh√† c·∫°nh ch·ªØ Home
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Home",
                    fontSize = 30.sp,
                    color = Color.White,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.width(8.dp)) // Kho·∫£ng c√°ch gi·ªØa icon v√† ch·ªØ "Home"
                Image(
                    painter = painterResource(id = R.drawable.header_home), // ƒê·ªïi l·∫°i v·ªõi icon c·ªßa b·∫°n
                    contentDescription = "Home Icon",
                    modifier = Modifier.size(30.dp)
                )
            }

            // Text "Hi, {userId}"
            Text(
                text = "Hi, $userName üëã", // S·ª≠ d·ª•ng tham s·ªë userId
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
        }

        Spacer(modifier = Modifier.height(30.dp))
    }
}
@Composable
fun YesNoButtons(navController: NavController,
                 yesOnClick:()->Unit={},
                 noOnClick:()->Unit={}){
    Row(
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier.fillMaxWidth().padding(horizontal = 30.dp)
    ) {
        Button(
            onClick = {
                noOnClick()
            },
            modifier = Modifier
                .width(150.dp)
                .height(40.dp),
            shape = RoundedCornerShape(25.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Red),
            contentPadding = PaddingValues(0.dp)
        ) {
            Text(
                text = "NO",
                fontSize = 16.sp,
                color = Color.White,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.width(16.dp))

        Button(
            onClick = {
                yesOnClick()
            },
            modifier = Modifier
                .width(150.dp)
                .height(40.dp),
            shape = RoundedCornerShape(25.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF8FC79A)),
            contentPadding = PaddingValues(0.dp)
        ) {
            Text(
                text = "YES!",
                fontSize = 16.sp,
                color = Color.White,
                fontWeight = FontWeight.Bold
            )
        }
    }
}
@Composable
fun PassengerItem(
    navController: NavController,
    avatarResId: Int,
    passengerName: String,
    onAcceptClick: () -> Unit // H√†nh ƒë·ªông khi nh·∫•n "Accept"
) {
    Column(
        modifier = Modifier.fillMaxWidth() // ƒê·∫£m b·∫£o column chi·∫øm h·∫øt chi·ªÅu r·ªông
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp), // CƒÉn ch·ªânh v√† th√™m kho·∫£ng c√°ch gi·ªØa c√°c d√≤ng
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            // Avatar
            Image(
                painter = painterResource(id = avatarResId), // Avatar ng∆∞·ªùi d√πng
                contentDescription = "Passenger Avatar",
                modifier = Modifier
                    .size(100.dp)
                    .clip(RoundedCornerShape(25.dp)) // Bo tr√≤n ·∫£nh avatar
            )

            // T√™n h√†nh kh√°ch
            Text(
                text = passengerName,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )

            // N√∫t Accept
            Button(
                onClick = { onAcceptClick() }, // X·ª≠ l√Ω khi nh·∫•n Accept
                modifier = Modifier
                    .width(100.dp)
                    .height(30.dp),
                shape = RoundedCornerShape(25.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF8FC79A)),
                contentPadding = PaddingValues(0.dp)
            ) {
                Text(
                    text = "Accept",
                    fontSize = 16.sp,
                    color = Color.White,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.align(Alignment.CenterVertically) // CƒÉn gi·ªØa text theo chi·ªÅu d·ªçc
                )
            }
        }

        // ƒê∆∞·ªùng ƒë·ª©t n√©t ·ªü cu·ªëi
        Divider(
            color = Color(0xFF8FC79A),
            thickness = 1.dp,
            modifier = Modifier
                .fillMaxWidth() // ƒê·∫£m b·∫£o ƒë∆∞·ªùng ƒë·ª©t n√©t d√†i b·∫±ng container
                .padding(top = 8.dp), // Kho·∫£ng c√°ch gi·ªØa ph·∫ßn tr√™n v√† ƒë∆∞·ªùng ƒë·ª©t n√©t
        )
    }
}
@Composable
fun InputhBar(value:String,onValueChange:(String)->Unit) {
    TextField(
        value = value,
        onValueChange = onValueChange,
        modifier = Modifier
            .fillMaxWidth(0.8f)
            .padding(horizontal = 16.dp)
            .height(50.dp) // TƒÉng nh·∫π chi·ªÅu cao ƒë·ªÉ c√≥ th√™m kh√¥ng gian hi·ªÉn th·ªã
            .clip(RoundedCornerShape(25.dp))
            .background(Color(0xFFEFF8F2)),
        textStyle = TextStyle(
            fontSize = 16.sp,
            lineHeight = 20.sp // ƒê·∫£m b·∫£o d√≤ng ch·ªØ kh√¥ng b·ªã c·∫Øt
        ),
        colors = TextFieldDefaults.colors(
            focusedContainerColor = Color(0xFFEFF8F2),
            unfocusedContainerColor = Color(0xFFEFF8F2),
            disabledContainerColor = Color(0xFFEFF8F2),
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent
        ),
        singleLine = true
    )
}
@Composable
fun TimePickerField(
    timeText: String,
    onValueChange: (String) -> Unit
) {
    val context = LocalContext.current

    Box(
        modifier = Modifier
            .fillMaxWidth(0.8f)
            .height(50.dp)
            .clip(RoundedCornerShape(25.dp))
            .background(Color(0xFFEFF8F2))
            .clickable { showTimePicker(context) { selectedTime -> onValueChange(selectedTime) } },
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = timeText,
            fontSize = 16.sp,
            fontWeight = FontWeight.Medium,
            color = if (timeText == "Select Time") Color.Gray else Color.Black
        )
    }
}

// H√†m hi·ªÉn th·ªã `TimePickerDialog`
fun showTimePicker(context: Context, onTimeSelected: (String) -> Unit) {
    val calendar = Calendar.getInstance()
    val hour = calendar.get(Calendar.HOUR_OF_DAY)
    val minute = calendar.get(Calendar.MINUTE)

    TimePickerDialog(context, { _, selectedHour, selectedMinute ->
        val formattedTime = String.format("%02d:%02d", selectedHour, selectedMinute)
        onTimeSelected(formattedTime)
    }, hour, minute, true).show()
}

@Composable
fun OfferDetails(estimatedDeparture: String,
                 fromLocation: String,
                 toLocation: String,
                 riderName:String,
                 riderUserId:String,
                 cost:String){
    Column(
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = "$estimatedDeparture",
            fontSize = 16.sp,
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text(
            text = "Route: From $fromLocation to $toLocation",
            fontSize = 15.sp
        )

        Spacer(modifier = Modifier.height(8.dp))
        Row(
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Text(
                text = "Rider: ",
                fontSize = 15.sp
            )
            Text(
                text = "$riderName",
                fontSize = 15.sp,
                fontWeight = FontWeight.Bold
            )
            Text(
                text = "- (UserID: $riderUserId)",
                fontSize = 15.sp
            )
        }
        Spacer(modifier = Modifier.height(8.dp))
        Row {
            Text(
                text = "Status: ",
                fontSize = 15.sp
            )
            Text(
                text = "Success",
                fontSize = 15.sp,
                color = Color.Green
            )
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Passenger Information: ???",
            fontSize = 15.sp
        )

        Spacer(modifier = Modifier.height(8.dp))
        Row {
            Text(
                text = "Cost: $cost ",
                fontSize = 15.sp,
            )
            Text(
                text = "K√© Coins",
                fontSize = 15.sp,
                color = Color.Yellow
            )
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Potential Passengers Section
        // Potential Passengers Section
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Potential Passengers",
                fontSize = 23.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.width(8.dp)) // Kho·∫£ng c√°ch gi·ªØa ch·ªØ v√† ƒë∆∞·ªùng k·∫ª
            Divider(
                color = Color.Black,
                thickness = 1.dp,
                modifier = Modifier
                    .weight(1f) // Chi·∫øm to√†n b·ªô kh√¥ng gian c√≤n l·∫°i c·ªßa Row ƒë·ªÉ k√©o d√†i ƒë∆∞·ªùng k·∫ª
            )
        }
    }
}
@Composable
fun AddNewOffer(navController: NavController,userId: String){
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 24.dp)
            .clickable {
                navController.navigate("add_new_offer1/$userId") // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh t·∫°o chuy·∫øn ƒëi m·ªõi
            },
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Image(
            painter = painterResource(id = R.drawable.add_offer_icon), // ·∫¢nh d·∫•u "+"
            contentDescription = "Add Offer Icon",
            modifier = Modifier.size(32.dp) // K√≠ch th∆∞·ªõc icon
        )

        Spacer(modifier = Modifier.width(8.dp))

        Text(
            text = "Add new offer",
            fontSize = 18.sp,
            color = Color(0xFF8FC79A),
            fontWeight = FontWeight.Medium
        )
    }
}
@Composable
fun AddNewOfferContent(iconId:Int,text:String){
    Image(
        painter = painterResource(id = iconId), // ·∫¢nh ƒë·ªìng h·ªì
        contentDescription = "Clock Icon",
        modifier = Modifier.size(200.dp)
    )

    Spacer(modifier = Modifier.height(40.dp))

    // C√¢u h·ªèi
    Text(
        text = text,
        fontSize = 22.sp,
        fontWeight = FontWeight.Medium,
        color = Color.Black
    )
}
@Composable
fun ShimmerHomeScreen(navController: NavController, userId: String, index:Int,active:Int) {

    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController, userId, active)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White)
                .padding(innerPadding)
        ) {
            ShimmerHomeHeader()

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                TopNavBar(navController, userId, index)
            }

            Spacer(modifier = Modifier.height(16.dp))

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .verticalScroll(rememberScrollState())
                    .padding(horizontal = 16.dp)
                    .shimmer(), // üí´ shimmer ·ªü ƒë√¢y
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                repeat(6) { // gi·∫£ l·∫≠p 6 d√≤ng shimmer
                    ShimmerRideItem()
                }
            }
        }
    }
}
@Composable
fun ShimmerHomeHeader() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp)
            .clip(RoundedCornerShape(8.dp))
            .background(Color(0xFF8FC79A)) // c√πng m√†u v·ªõi HomeHeader g·ªëc
            .shimmer(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Spacer(modifier = Modifier.height(60.dp))

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .height(30.dp)
                        .width(100.dp)
                        .clip(RoundedCornerShape(6.dp))
                        .background(Color.LightGray)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Box(
                    modifier = Modifier
                        .size(30.dp)
                        .clip(RoundedCornerShape(6.dp))
                        .background(Color.LightGray)
                )
            }

            Box(
                modifier = Modifier
                    .height(24.dp)
                    .width(120.dp)
                    .clip(RoundedCornerShape(6.dp))
                    .background(Color.LightGray)
            )
        }

        Spacer(modifier = Modifier.height(30.dp))
    }
}